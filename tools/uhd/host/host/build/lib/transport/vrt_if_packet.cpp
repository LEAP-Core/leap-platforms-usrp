
/***********************************************************************
 * This file was generated by /home/kfleming/uhd/host/lib/transport/gen_vrt_if_packet.py on Sat Apr  2 14:36:27 2011
 **********************************************************************/

#include <uhd/transport/vrt_if_packet.hpp>
#include <uhd/utils/byteswap.hpp>
#include <boost/detail/endian.hpp>
#include <stdexcept>
#include <vector>

//define the endian macros to convert integers
#ifdef BOOST_BIG_ENDIAN
    #define BE_MACRO(x) (x)
    #define LE_MACRO(x) uhd::byteswap(x)
#else
    #define BE_MACRO(x) uhd::byteswap(x)
    #define LE_MACRO(x) (x)
#endif

using namespace uhd;
using namespace uhd::transport;

typedef size_t pred_type;
typedef std::vector<pred_type> pred_table_type;
#define pred_table_index(hdr) ((hdr >> 20) & 0x1ff)

static pred_table_type get_pred_unpack_table(void){
    pred_table_type table(1 << 9, 0); //only 9 bits useful here (20-28)
    for (size_t i = 0; i < table.size(); i++){
        boost::uint32_t vrt_hdr_word = i << 20;
        if(vrt_hdr_word & 0x10000000) table[i] |= 0x1;
        if(vrt_hdr_word & 0x8000000) table[i] |= 0x2;
        if(vrt_hdr_word & 0xc00000) table[i] |= 0x4;
        if(vrt_hdr_word & 0x300000) table[i] |= 0x8;
        if(vrt_hdr_word & 0x4000000) table[i] |= 0x10;
    }
    return table;
}

static const pred_table_type pred_unpack_table(get_pred_unpack_table());



void vrt::if_hdr_pack_be(
    boost::uint32_t *packet_buff,
    if_packet_info_t &if_packet_info
){
    boost::uint32_t vrt_hdr_flags = 0;

    pred_type pred = 0;
    if (if_packet_info.has_sid) pred |= 0x1;
    if (if_packet_info.has_cid) pred |= 0x2;
    if (if_packet_info.has_tsi) pred |= 0x4;
    if (if_packet_info.has_tsf) pred |= 0x8;
    if (if_packet_info.has_tlr) pred |= 0x10;

    switch(pred){
    case 0:
            if_packet_info.num_header_words32 = 1;
            if_packet_info.num_packet_words32 = 1 + if_packet_info.num_payload_words32;
            vrt_hdr_flags = 0x0;
        break;
    case 1:
            packet_buff[1] = BE_MACRO(if_packet_info.sid);
            if_packet_info.num_header_words32 = 2;
            if_packet_info.num_packet_words32 = 2 + if_packet_info.num_payload_words32;
            vrt_hdr_flags = 0x10000000;
        break;
    case 2:
            packet_buff[1] = 0; //not implemented
            packet_buff[2] = 0; //not implemented
            if_packet_info.num_header_words32 = 3;
            if_packet_info.num_packet_words32 = 3 + if_packet_info.num_payload_words32;
            vrt_hdr_flags = 0x8000000;
        break;
    case 3:
            packet_buff[1] = BE_MACRO(if_packet_info.sid);
            packet_buff[2] = 0; //not implemented
            packet_buff[3] = 0; //not implemented
            if_packet_info.num_header_words32 = 4;
            if_packet_info.num_packet_words32 = 4 + if_packet_info.num_payload_words32;
            vrt_hdr_flags = 0x18000000;
        break;
    case 4:
            packet_buff[1] = BE_MACRO(if_packet_info.tsi);
            if_packet_info.num_header_words32 = 2;
            if_packet_info.num_packet_words32 = 2 + if_packet_info.num_payload_words32;
            vrt_hdr_flags = 0xc00000;
        break;
    case 5:
            packet_buff[1] = BE_MACRO(if_packet_info.sid);
            packet_buff[2] = BE_MACRO(if_packet_info.tsi);
            if_packet_info.num_header_words32 = 3;
            if_packet_info.num_packet_words32 = 3 + if_packet_info.num_payload_words32;
            vrt_hdr_flags = 0x10c00000;
        break;
    case 6:
            packet_buff[1] = 0; //not implemented
            packet_buff[2] = 0; //not implemented
            packet_buff[3] = BE_MACRO(if_packet_info.tsi);
            if_packet_info.num_header_words32 = 4;
            if_packet_info.num_packet_words32 = 4 + if_packet_info.num_payload_words32;
            vrt_hdr_flags = 0x8c00000;
        break;
    case 7:
            packet_buff[1] = BE_MACRO(if_packet_info.sid);
            packet_buff[2] = 0; //not implemented
            packet_buff[3] = 0; //not implemented
            packet_buff[4] = BE_MACRO(if_packet_info.tsi);
            if_packet_info.num_header_words32 = 5;
            if_packet_info.num_packet_words32 = 5 + if_packet_info.num_payload_words32;
            vrt_hdr_flags = 0x18c00000;
        break;
    case 8:
            packet_buff[1] = BE_MACRO(boost::uint32_t(if_packet_info.tsf >> 32));
            packet_buff[2] = BE_MACRO(boost::uint32_t(if_packet_info.tsf >> 0));
            if_packet_info.num_header_words32 = 3;
            if_packet_info.num_packet_words32 = 3 + if_packet_info.num_payload_words32;
            vrt_hdr_flags = 0x100000;
        break;
    case 9:
            packet_buff[1] = BE_MACRO(if_packet_info.sid);
            packet_buff[2] = BE_MACRO(boost::uint32_t(if_packet_info.tsf >> 32));
            packet_buff[3] = BE_MACRO(boost::uint32_t(if_packet_info.tsf >> 0));
            if_packet_info.num_header_words32 = 4;
            if_packet_info.num_packet_words32 = 4 + if_packet_info.num_payload_words32;
            vrt_hdr_flags = 0x10100000;
        break;
    case 10:
            packet_buff[1] = 0; //not implemented
            packet_buff[2] = 0; //not implemented
            packet_buff[3] = BE_MACRO(boost::uint32_t(if_packet_info.tsf >> 32));
            packet_buff[4] = BE_MACRO(boost::uint32_t(if_packet_info.tsf >> 0));
            if_packet_info.num_header_words32 = 5;
            if_packet_info.num_packet_words32 = 5 + if_packet_info.num_payload_words32;
            vrt_hdr_flags = 0x8100000;
        break;
    case 11:
            packet_buff[1] = BE_MACRO(if_packet_info.sid);
            packet_buff[2] = 0; //not implemented
            packet_buff[3] = 0; //not implemented
            packet_buff[4] = BE_MACRO(boost::uint32_t(if_packet_info.tsf >> 32));
            packet_buff[5] = BE_MACRO(boost::uint32_t(if_packet_info.tsf >> 0));
            if_packet_info.num_header_words32 = 6;
            if_packet_info.num_packet_words32 = 6 + if_packet_info.num_payload_words32;
            vrt_hdr_flags = 0x18100000;
        break;
    case 12:
            packet_buff[1] = BE_MACRO(if_packet_info.tsi);
            packet_buff[2] = BE_MACRO(boost::uint32_t(if_packet_info.tsf >> 32));
            packet_buff[3] = BE_MACRO(boost::uint32_t(if_packet_info.tsf >> 0));
            if_packet_info.num_header_words32 = 4;
            if_packet_info.num_packet_words32 = 4 + if_packet_info.num_payload_words32;
            vrt_hdr_flags = 0xd00000;
        break;
    case 13:
            packet_buff[1] = BE_MACRO(if_packet_info.sid);
            packet_buff[2] = BE_MACRO(if_packet_info.tsi);
            packet_buff[3] = BE_MACRO(boost::uint32_t(if_packet_info.tsf >> 32));
            packet_buff[4] = BE_MACRO(boost::uint32_t(if_packet_info.tsf >> 0));
            if_packet_info.num_header_words32 = 5;
            if_packet_info.num_packet_words32 = 5 + if_packet_info.num_payload_words32;
            vrt_hdr_flags = 0x10d00000;
        break;
    case 14:
            packet_buff[1] = 0; //not implemented
            packet_buff[2] = 0; //not implemented
            packet_buff[3] = BE_MACRO(if_packet_info.tsi);
            packet_buff[4] = BE_MACRO(boost::uint32_t(if_packet_info.tsf >> 32));
            packet_buff[5] = BE_MACRO(boost::uint32_t(if_packet_info.tsf >> 0));
            if_packet_info.num_header_words32 = 6;
            if_packet_info.num_packet_words32 = 6 + if_packet_info.num_payload_words32;
            vrt_hdr_flags = 0x8d00000;
        break;
    case 15:
            packet_buff[1] = BE_MACRO(if_packet_info.sid);
            packet_buff[2] = 0; //not implemented
            packet_buff[3] = 0; //not implemented
            packet_buff[4] = BE_MACRO(if_packet_info.tsi);
            packet_buff[5] = BE_MACRO(boost::uint32_t(if_packet_info.tsf >> 32));
            packet_buff[6] = BE_MACRO(boost::uint32_t(if_packet_info.tsf >> 0));
            if_packet_info.num_header_words32 = 7;
            if_packet_info.num_packet_words32 = 7 + if_packet_info.num_payload_words32;
            vrt_hdr_flags = 0x18d00000;
        break;
    case 16:
            //packet_buff[1+if_packet_info.num_payload_words32] = BE_MACRO(if_packet_info.tlr);
            if_packet_info.num_header_words32 = 1;
            if_packet_info.num_packet_words32 = 2 + if_packet_info.num_payload_words32;
            vrt_hdr_flags = 0x4000000;
        break;
    case 17:
            packet_buff[1] = BE_MACRO(if_packet_info.sid);
            //packet_buff[2+if_packet_info.num_payload_words32] = BE_MACRO(if_packet_info.tlr);
            if_packet_info.num_header_words32 = 2;
            if_packet_info.num_packet_words32 = 3 + if_packet_info.num_payload_words32;
            vrt_hdr_flags = 0x14000000;
        break;
    case 18:
            packet_buff[1] = 0; //not implemented
            packet_buff[2] = 0; //not implemented
            //packet_buff[3+if_packet_info.num_payload_words32] = BE_MACRO(if_packet_info.tlr);
            if_packet_info.num_header_words32 = 3;
            if_packet_info.num_packet_words32 = 4 + if_packet_info.num_payload_words32;
            vrt_hdr_flags = 0xc000000;
        break;
    case 19:
            packet_buff[1] = BE_MACRO(if_packet_info.sid);
            packet_buff[2] = 0; //not implemented
            packet_buff[3] = 0; //not implemented
            //packet_buff[4+if_packet_info.num_payload_words32] = BE_MACRO(if_packet_info.tlr);
            if_packet_info.num_header_words32 = 4;
            if_packet_info.num_packet_words32 = 5 + if_packet_info.num_payload_words32;
            vrt_hdr_flags = 0x1c000000;
        break;
    case 20:
            packet_buff[1] = BE_MACRO(if_packet_info.tsi);
            //packet_buff[2+if_packet_info.num_payload_words32] = BE_MACRO(if_packet_info.tlr);
            if_packet_info.num_header_words32 = 2;
            if_packet_info.num_packet_words32 = 3 + if_packet_info.num_payload_words32;
            vrt_hdr_flags = 0x4c00000;
        break;
    case 21:
            packet_buff[1] = BE_MACRO(if_packet_info.sid);
            packet_buff[2] = BE_MACRO(if_packet_info.tsi);
            //packet_buff[3+if_packet_info.num_payload_words32] = BE_MACRO(if_packet_info.tlr);
            if_packet_info.num_header_words32 = 3;
            if_packet_info.num_packet_words32 = 4 + if_packet_info.num_payload_words32;
            vrt_hdr_flags = 0x14c00000;
        break;
    case 22:
            packet_buff[1] = 0; //not implemented
            packet_buff[2] = 0; //not implemented
            packet_buff[3] = BE_MACRO(if_packet_info.tsi);
            //packet_buff[4+if_packet_info.num_payload_words32] = BE_MACRO(if_packet_info.tlr);
            if_packet_info.num_header_words32 = 4;
            if_packet_info.num_packet_words32 = 5 + if_packet_info.num_payload_words32;
            vrt_hdr_flags = 0xcc00000;
        break;
    case 23:
            packet_buff[1] = BE_MACRO(if_packet_info.sid);
            packet_buff[2] = 0; //not implemented
            packet_buff[3] = 0; //not implemented
            packet_buff[4] = BE_MACRO(if_packet_info.tsi);
            //packet_buff[5+if_packet_info.num_payload_words32] = BE_MACRO(if_packet_info.tlr);
            if_packet_info.num_header_words32 = 5;
            if_packet_info.num_packet_words32 = 6 + if_packet_info.num_payload_words32;
            vrt_hdr_flags = 0x1cc00000;
        break;
    case 24:
            packet_buff[1] = BE_MACRO(boost::uint32_t(if_packet_info.tsf >> 32));
            packet_buff[2] = BE_MACRO(boost::uint32_t(if_packet_info.tsf >> 0));
            //packet_buff[3+if_packet_info.num_payload_words32] = BE_MACRO(if_packet_info.tlr);
            if_packet_info.num_header_words32 = 3;
            if_packet_info.num_packet_words32 = 4 + if_packet_info.num_payload_words32;
            vrt_hdr_flags = 0x4100000;
        break;
    case 25:
            packet_buff[1] = BE_MACRO(if_packet_info.sid);
            packet_buff[2] = BE_MACRO(boost::uint32_t(if_packet_info.tsf >> 32));
            packet_buff[3] = BE_MACRO(boost::uint32_t(if_packet_info.tsf >> 0));
            //packet_buff[4+if_packet_info.num_payload_words32] = BE_MACRO(if_packet_info.tlr);
            if_packet_info.num_header_words32 = 4;
            if_packet_info.num_packet_words32 = 5 + if_packet_info.num_payload_words32;
            vrt_hdr_flags = 0x14100000;
        break;
    case 26:
            packet_buff[1] = 0; //not implemented
            packet_buff[2] = 0; //not implemented
            packet_buff[3] = BE_MACRO(boost::uint32_t(if_packet_info.tsf >> 32));
            packet_buff[4] = BE_MACRO(boost::uint32_t(if_packet_info.tsf >> 0));
            //packet_buff[5+if_packet_info.num_payload_words32] = BE_MACRO(if_packet_info.tlr);
            if_packet_info.num_header_words32 = 5;
            if_packet_info.num_packet_words32 = 6 + if_packet_info.num_payload_words32;
            vrt_hdr_flags = 0xc100000;
        break;
    case 27:
            packet_buff[1] = BE_MACRO(if_packet_info.sid);
            packet_buff[2] = 0; //not implemented
            packet_buff[3] = 0; //not implemented
            packet_buff[4] = BE_MACRO(boost::uint32_t(if_packet_info.tsf >> 32));
            packet_buff[5] = BE_MACRO(boost::uint32_t(if_packet_info.tsf >> 0));
            //packet_buff[6+if_packet_info.num_payload_words32] = BE_MACRO(if_packet_info.tlr);
            if_packet_info.num_header_words32 = 6;
            if_packet_info.num_packet_words32 = 7 + if_packet_info.num_payload_words32;
            vrt_hdr_flags = 0x1c100000;
        break;
    case 28:
            packet_buff[1] = BE_MACRO(if_packet_info.tsi);
            packet_buff[2] = BE_MACRO(boost::uint32_t(if_packet_info.tsf >> 32));
            packet_buff[3] = BE_MACRO(boost::uint32_t(if_packet_info.tsf >> 0));
            //packet_buff[4+if_packet_info.num_payload_words32] = BE_MACRO(if_packet_info.tlr);
            if_packet_info.num_header_words32 = 4;
            if_packet_info.num_packet_words32 = 5 + if_packet_info.num_payload_words32;
            vrt_hdr_flags = 0x4d00000;
        break;
    case 29:
            packet_buff[1] = BE_MACRO(if_packet_info.sid);
            packet_buff[2] = BE_MACRO(if_packet_info.tsi);
            packet_buff[3] = BE_MACRO(boost::uint32_t(if_packet_info.tsf >> 32));
            packet_buff[4] = BE_MACRO(boost::uint32_t(if_packet_info.tsf >> 0));
            //packet_buff[5+if_packet_info.num_payload_words32] = BE_MACRO(if_packet_info.tlr);
            if_packet_info.num_header_words32 = 5;
            if_packet_info.num_packet_words32 = 6 + if_packet_info.num_payload_words32;
            vrt_hdr_flags = 0x14d00000;
        break;
    case 30:
            packet_buff[1] = 0; //not implemented
            packet_buff[2] = 0; //not implemented
            packet_buff[3] = BE_MACRO(if_packet_info.tsi);
            packet_buff[4] = BE_MACRO(boost::uint32_t(if_packet_info.tsf >> 32));
            packet_buff[5] = BE_MACRO(boost::uint32_t(if_packet_info.tsf >> 0));
            //packet_buff[6+if_packet_info.num_payload_words32] = BE_MACRO(if_packet_info.tlr);
            if_packet_info.num_header_words32 = 6;
            if_packet_info.num_packet_words32 = 7 + if_packet_info.num_payload_words32;
            vrt_hdr_flags = 0xcd00000;
        break;
    case 31:
            packet_buff[1] = BE_MACRO(if_packet_info.sid);
            packet_buff[2] = 0; //not implemented
            packet_buff[3] = 0; //not implemented
            packet_buff[4] = BE_MACRO(if_packet_info.tsi);
            packet_buff[5] = BE_MACRO(boost::uint32_t(if_packet_info.tsf >> 32));
            packet_buff[6] = BE_MACRO(boost::uint32_t(if_packet_info.tsf >> 0));
            //packet_buff[7+if_packet_info.num_payload_words32] = BE_MACRO(if_packet_info.tlr);
            if_packet_info.num_header_words32 = 7;
            if_packet_info.num_packet_words32 = 8 + if_packet_info.num_payload_words32;
            vrt_hdr_flags = 0x1cd00000;
        break;
    }

    //set the burst flags
    if (if_packet_info.sob) vrt_hdr_flags |= 0x2000000;
    if (if_packet_info.eob) vrt_hdr_flags |= 0x1000000;

    //fill in complete header word
    packet_buff[0] = BE_MACRO(boost::uint32_t(0
        | vrt_hdr_flags
        | ((if_packet_info.packet_count & 0xf) << 16)
        | (if_packet_info.num_packet_words32 & 0xffff)
    ));
}

void vrt::if_hdr_unpack_be(
    const boost::uint32_t *packet_buff,
    if_packet_info_t &if_packet_info
){
    //extract vrt header
    boost::uint32_t vrt_hdr_word = BE_MACRO(packet_buff[0]);
    /*
    size_t packet_words32 = vrt_hdr_word & 0xffff;

    //failure case
    if (if_packet_info.num_packet_words32 < packet_words32)
        throw std::runtime_error("bad vrt header or packet fragment");
    */
    //Fix for short packets sent from the fpga:
    //  Use the num_packet_words32 passed in as input,
    //  and do not use the header bits which could be wrong.
    size_t packet_words32 = if_packet_info.num_packet_words32;

    //extract fields from the header
    if_packet_info.packet_type = if_packet_info_t::packet_type_t(vrt_hdr_word >> 29);
    if_packet_info.packet_count = (vrt_hdr_word >> 16) & 0xf;
    //if_packet_info.sob = bool(vrt_hdr_word & 0x2000000); //not implemented
    //if_packet_info.eob = bool(vrt_hdr_word & 0x1000000); //not implemented

    const pred_type pred = pred_unpack_table[pred_table_index(vrt_hdr_word)];

    switch(pred){
    case 0:
            if_packet_info.has_sid = false;
            if_packet_info.has_cid = false;
            if_packet_info.has_tsi = false;
            if_packet_info.has_tsf = false;
            if_packet_info.has_tlr = false;
            //another failure case
            if (packet_words32 < 1)
                throw std::runtime_error("bad vrt header or invalid packet length");
            if_packet_info.num_header_words32 = 1;
            if_packet_info.num_payload_words32 = packet_words32 - 1;
        break;
    case 1:
            if_packet_info.has_sid = true;
            if_packet_info.sid = BE_MACRO(packet_buff[1]);
            if_packet_info.has_cid = false;
            if_packet_info.has_tsi = false;
            if_packet_info.has_tsf = false;
            if_packet_info.has_tlr = false;
            //another failure case
            if (packet_words32 < 2)
                throw std::runtime_error("bad vrt header or invalid packet length");
            if_packet_info.num_header_words32 = 2;
            if_packet_info.num_payload_words32 = packet_words32 - 2;
        break;
    case 2:
            if_packet_info.has_sid = false;
            if_packet_info.has_cid = true;
            if_packet_info.cid = 0; //not implemented
            if_packet_info.has_tsi = false;
            if_packet_info.has_tsf = false;
            if_packet_info.has_tlr = false;
            //another failure case
            if (packet_words32 < 3)
                throw std::runtime_error("bad vrt header or invalid packet length");
            if_packet_info.num_header_words32 = 3;
            if_packet_info.num_payload_words32 = packet_words32 - 3;
        break;
    case 3:
            if_packet_info.has_sid = true;
            if_packet_info.sid = BE_MACRO(packet_buff[1]);
            if_packet_info.has_cid = true;
            if_packet_info.cid = 0; //not implemented
            if_packet_info.has_tsi = false;
            if_packet_info.has_tsf = false;
            if_packet_info.has_tlr = false;
            //another failure case
            if (packet_words32 < 4)
                throw std::runtime_error("bad vrt header or invalid packet length");
            if_packet_info.num_header_words32 = 4;
            if_packet_info.num_payload_words32 = packet_words32 - 4;
        break;
    case 4:
            if_packet_info.has_sid = false;
            if_packet_info.has_cid = false;
            if_packet_info.has_tsi = true;
            if_packet_info.tsi = BE_MACRO(packet_buff[1]);
            if_packet_info.has_tsf = false;
            if_packet_info.has_tlr = false;
            //another failure case
            if (packet_words32 < 2)
                throw std::runtime_error("bad vrt header or invalid packet length");
            if_packet_info.num_header_words32 = 2;
            if_packet_info.num_payload_words32 = packet_words32 - 2;
        break;
    case 5:
            if_packet_info.has_sid = true;
            if_packet_info.sid = BE_MACRO(packet_buff[1]);
            if_packet_info.has_cid = false;
            if_packet_info.has_tsi = true;
            if_packet_info.tsi = BE_MACRO(packet_buff[2]);
            if_packet_info.has_tsf = false;
            if_packet_info.has_tlr = false;
            //another failure case
            if (packet_words32 < 3)
                throw std::runtime_error("bad vrt header or invalid packet length");
            if_packet_info.num_header_words32 = 3;
            if_packet_info.num_payload_words32 = packet_words32 - 3;
        break;
    case 6:
            if_packet_info.has_sid = false;
            if_packet_info.has_cid = true;
            if_packet_info.cid = 0; //not implemented
            if_packet_info.has_tsi = true;
            if_packet_info.tsi = BE_MACRO(packet_buff[3]);
            if_packet_info.has_tsf = false;
            if_packet_info.has_tlr = false;
            //another failure case
            if (packet_words32 < 4)
                throw std::runtime_error("bad vrt header or invalid packet length");
            if_packet_info.num_header_words32 = 4;
            if_packet_info.num_payload_words32 = packet_words32 - 4;
        break;
    case 7:
            if_packet_info.has_sid = true;
            if_packet_info.sid = BE_MACRO(packet_buff[1]);
            if_packet_info.has_cid = true;
            if_packet_info.cid = 0; //not implemented
            if_packet_info.has_tsi = true;
            if_packet_info.tsi = BE_MACRO(packet_buff[4]);
            if_packet_info.has_tsf = false;
            if_packet_info.has_tlr = false;
            //another failure case
            if (packet_words32 < 5)
                throw std::runtime_error("bad vrt header or invalid packet length");
            if_packet_info.num_header_words32 = 5;
            if_packet_info.num_payload_words32 = packet_words32 - 5;
        break;
    case 8:
            if_packet_info.has_sid = false;
            if_packet_info.has_cid = false;
            if_packet_info.has_tsi = false;
            if_packet_info.has_tsf = true;
            if_packet_info.tsf = boost::uint64_t(BE_MACRO(packet_buff[1])) << 32;
            if_packet_info.tsf |= BE_MACRO(packet_buff[2]);
            if_packet_info.has_tlr = false;
            //another failure case
            if (packet_words32 < 3)
                throw std::runtime_error("bad vrt header or invalid packet length");
            if_packet_info.num_header_words32 = 3;
            if_packet_info.num_payload_words32 = packet_words32 - 3;
        break;
    case 9:
            if_packet_info.has_sid = true;
            if_packet_info.sid = BE_MACRO(packet_buff[1]);
            if_packet_info.has_cid = false;
            if_packet_info.has_tsi = false;
            if_packet_info.has_tsf = true;
            if_packet_info.tsf = boost::uint64_t(BE_MACRO(packet_buff[2])) << 32;
            if_packet_info.tsf |= BE_MACRO(packet_buff[3]);
            if_packet_info.has_tlr = false;
            //another failure case
            if (packet_words32 < 4)
                throw std::runtime_error("bad vrt header or invalid packet length");
            if_packet_info.num_header_words32 = 4;
            if_packet_info.num_payload_words32 = packet_words32 - 4;
        break;
    case 10:
            if_packet_info.has_sid = false;
            if_packet_info.has_cid = true;
            if_packet_info.cid = 0; //not implemented
            if_packet_info.has_tsi = false;
            if_packet_info.has_tsf = true;
            if_packet_info.tsf = boost::uint64_t(BE_MACRO(packet_buff[3])) << 32;
            if_packet_info.tsf |= BE_MACRO(packet_buff[4]);
            if_packet_info.has_tlr = false;
            //another failure case
            if (packet_words32 < 5)
                throw std::runtime_error("bad vrt header or invalid packet length");
            if_packet_info.num_header_words32 = 5;
            if_packet_info.num_payload_words32 = packet_words32 - 5;
        break;
    case 11:
            if_packet_info.has_sid = true;
            if_packet_info.sid = BE_MACRO(packet_buff[1]);
            if_packet_info.has_cid = true;
            if_packet_info.cid = 0; //not implemented
            if_packet_info.has_tsi = false;
            if_packet_info.has_tsf = true;
            if_packet_info.tsf = boost::uint64_t(BE_MACRO(packet_buff[4])) << 32;
            if_packet_info.tsf |= BE_MACRO(packet_buff[5]);
            if_packet_info.has_tlr = false;
            //another failure case
            if (packet_words32 < 6)
                throw std::runtime_error("bad vrt header or invalid packet length");
            if_packet_info.num_header_words32 = 6;
            if_packet_info.num_payload_words32 = packet_words32 - 6;
        break;
    case 12:
            if_packet_info.has_sid = false;
            if_packet_info.has_cid = false;
            if_packet_info.has_tsi = true;
            if_packet_info.tsi = BE_MACRO(packet_buff[1]);
            if_packet_info.has_tsf = true;
            if_packet_info.tsf = boost::uint64_t(BE_MACRO(packet_buff[2])) << 32;
            if_packet_info.tsf |= BE_MACRO(packet_buff[3]);
            if_packet_info.has_tlr = false;
            //another failure case
            if (packet_words32 < 4)
                throw std::runtime_error("bad vrt header or invalid packet length");
            if_packet_info.num_header_words32 = 4;
            if_packet_info.num_payload_words32 = packet_words32 - 4;
        break;
    case 13:
            if_packet_info.has_sid = true;
            if_packet_info.sid = BE_MACRO(packet_buff[1]);
            if_packet_info.has_cid = false;
            if_packet_info.has_tsi = true;
            if_packet_info.tsi = BE_MACRO(packet_buff[2]);
            if_packet_info.has_tsf = true;
            if_packet_info.tsf = boost::uint64_t(BE_MACRO(packet_buff[3])) << 32;
            if_packet_info.tsf |= BE_MACRO(packet_buff[4]);
            if_packet_info.has_tlr = false;
            //another failure case
            if (packet_words32 < 5)
                throw std::runtime_error("bad vrt header or invalid packet length");
            if_packet_info.num_header_words32 = 5;
            if_packet_info.num_payload_words32 = packet_words32 - 5;
        break;
    case 14:
            if_packet_info.has_sid = false;
            if_packet_info.has_cid = true;
            if_packet_info.cid = 0; //not implemented
            if_packet_info.has_tsi = true;
            if_packet_info.tsi = BE_MACRO(packet_buff[3]);
            if_packet_info.has_tsf = true;
            if_packet_info.tsf = boost::uint64_t(BE_MACRO(packet_buff[4])) << 32;
            if_packet_info.tsf |= BE_MACRO(packet_buff[5]);
            if_packet_info.has_tlr = false;
            //another failure case
            if (packet_words32 < 6)
                throw std::runtime_error("bad vrt header or invalid packet length");
            if_packet_info.num_header_words32 = 6;
            if_packet_info.num_payload_words32 = packet_words32 - 6;
        break;
    case 15:
            if_packet_info.has_sid = true;
            if_packet_info.sid = BE_MACRO(packet_buff[1]);
            if_packet_info.has_cid = true;
            if_packet_info.cid = 0; //not implemented
            if_packet_info.has_tsi = true;
            if_packet_info.tsi = BE_MACRO(packet_buff[4]);
            if_packet_info.has_tsf = true;
            if_packet_info.tsf = boost::uint64_t(BE_MACRO(packet_buff[5])) << 32;
            if_packet_info.tsf |= BE_MACRO(packet_buff[6]);
            if_packet_info.has_tlr = false;
            //another failure case
            if (packet_words32 < 7)
                throw std::runtime_error("bad vrt header or invalid packet length");
            if_packet_info.num_header_words32 = 7;
            if_packet_info.num_payload_words32 = packet_words32 - 7;
        break;
    case 16:
            if_packet_info.has_sid = false;
            if_packet_info.has_cid = false;
            if_packet_info.has_tsi = false;
            if_packet_info.has_tsf = false;
            if_packet_info.has_tlr = true;
            if_packet_info.tlr = BE_MACRO(packet_buff[packet_words32-1]);
            //another failure case
            if (packet_words32 < 2)
                throw std::runtime_error("bad vrt header or invalid packet length");
            if_packet_info.num_header_words32 = 1;
            if_packet_info.num_payload_words32 = packet_words32 - 2;
        break;
    case 17:
            if_packet_info.has_sid = true;
            if_packet_info.sid = BE_MACRO(packet_buff[1]);
            if_packet_info.has_cid = false;
            if_packet_info.has_tsi = false;
            if_packet_info.has_tsf = false;
            if_packet_info.has_tlr = true;
            if_packet_info.tlr = BE_MACRO(packet_buff[packet_words32-1]);
            //another failure case
            if (packet_words32 < 3)
                throw std::runtime_error("bad vrt header or invalid packet length");
            if_packet_info.num_header_words32 = 2;
            if_packet_info.num_payload_words32 = packet_words32 - 3;
        break;
    case 18:
            if_packet_info.has_sid = false;
            if_packet_info.has_cid = true;
            if_packet_info.cid = 0; //not implemented
            if_packet_info.has_tsi = false;
            if_packet_info.has_tsf = false;
            if_packet_info.has_tlr = true;
            if_packet_info.tlr = BE_MACRO(packet_buff[packet_words32-1]);
            //another failure case
            if (packet_words32 < 4)
                throw std::runtime_error("bad vrt header or invalid packet length");
            if_packet_info.num_header_words32 = 3;
            if_packet_info.num_payload_words32 = packet_words32 - 4;
        break;
    case 19:
            if_packet_info.has_sid = true;
            if_packet_info.sid = BE_MACRO(packet_buff[1]);
            if_packet_info.has_cid = true;
            if_packet_info.cid = 0; //not implemented
            if_packet_info.has_tsi = false;
            if_packet_info.has_tsf = false;
            if_packet_info.has_tlr = true;
            if_packet_info.tlr = BE_MACRO(packet_buff[packet_words32-1]);
            //another failure case
            if (packet_words32 < 5)
                throw std::runtime_error("bad vrt header or invalid packet length");
            if_packet_info.num_header_words32 = 4;
            if_packet_info.num_payload_words32 = packet_words32 - 5;
        break;
    case 20:
            if_packet_info.has_sid = false;
            if_packet_info.has_cid = false;
            if_packet_info.has_tsi = true;
            if_packet_info.tsi = BE_MACRO(packet_buff[1]);
            if_packet_info.has_tsf = false;
            if_packet_info.has_tlr = true;
            if_packet_info.tlr = BE_MACRO(packet_buff[packet_words32-1]);
            //another failure case
            if (packet_words32 < 3)
                throw std::runtime_error("bad vrt header or invalid packet length");
            if_packet_info.num_header_words32 = 2;
            if_packet_info.num_payload_words32 = packet_words32 - 3;
        break;
    case 21:
            if_packet_info.has_sid = true;
            if_packet_info.sid = BE_MACRO(packet_buff[1]);
            if_packet_info.has_cid = false;
            if_packet_info.has_tsi = true;
            if_packet_info.tsi = BE_MACRO(packet_buff[2]);
            if_packet_info.has_tsf = false;
            if_packet_info.has_tlr = true;
            if_packet_info.tlr = BE_MACRO(packet_buff[packet_words32-1]);
            //another failure case
            if (packet_words32 < 4)
                throw std::runtime_error("bad vrt header or invalid packet length");
            if_packet_info.num_header_words32 = 3;
            if_packet_info.num_payload_words32 = packet_words32 - 4;
        break;
    case 22:
            if_packet_info.has_sid = false;
            if_packet_info.has_cid = true;
            if_packet_info.cid = 0; //not implemented
            if_packet_info.has_tsi = true;
            if_packet_info.tsi = BE_MACRO(packet_buff[3]);
            if_packet_info.has_tsf = false;
            if_packet_info.has_tlr = true;
            if_packet_info.tlr = BE_MACRO(packet_buff[packet_words32-1]);
            //another failure case
            if (packet_words32 < 5)
                throw std::runtime_error("bad vrt header or invalid packet length");
            if_packet_info.num_header_words32 = 4;
            if_packet_info.num_payload_words32 = packet_words32 - 5;
        break;
    case 23:
            if_packet_info.has_sid = true;
            if_packet_info.sid = BE_MACRO(packet_buff[1]);
            if_packet_info.has_cid = true;
            if_packet_info.cid = 0; //not implemented
            if_packet_info.has_tsi = true;
            if_packet_info.tsi = BE_MACRO(packet_buff[4]);
            if_packet_info.has_tsf = false;
            if_packet_info.has_tlr = true;
            if_packet_info.tlr = BE_MACRO(packet_buff[packet_words32-1]);
            //another failure case
            if (packet_words32 < 6)
                throw std::runtime_error("bad vrt header or invalid packet length");
            if_packet_info.num_header_words32 = 5;
            if_packet_info.num_payload_words32 = packet_words32 - 6;
        break;
    case 24:
            if_packet_info.has_sid = false;
            if_packet_info.has_cid = false;
            if_packet_info.has_tsi = false;
            if_packet_info.has_tsf = true;
            if_packet_info.tsf = boost::uint64_t(BE_MACRO(packet_buff[1])) << 32;
            if_packet_info.tsf |= BE_MACRO(packet_buff[2]);
            if_packet_info.has_tlr = true;
            if_packet_info.tlr = BE_MACRO(packet_buff[packet_words32-1]);
            //another failure case
            if (packet_words32 < 4)
                throw std::runtime_error("bad vrt header or invalid packet length");
            if_packet_info.num_header_words32 = 3;
            if_packet_info.num_payload_words32 = packet_words32 - 4;
        break;
    case 25:
            if_packet_info.has_sid = true;
            if_packet_info.sid = BE_MACRO(packet_buff[1]);
            if_packet_info.has_cid = false;
            if_packet_info.has_tsi = false;
            if_packet_info.has_tsf = true;
            if_packet_info.tsf = boost::uint64_t(BE_MACRO(packet_buff[2])) << 32;
            if_packet_info.tsf |= BE_MACRO(packet_buff[3]);
            if_packet_info.has_tlr = true;
            if_packet_info.tlr = BE_MACRO(packet_buff[packet_words32-1]);
            //another failure case
            if (packet_words32 < 5)
                throw std::runtime_error("bad vrt header or invalid packet length");
            if_packet_info.num_header_words32 = 4;
            if_packet_info.num_payload_words32 = packet_words32 - 5;
        break;
    case 26:
            if_packet_info.has_sid = false;
            if_packet_info.has_cid = true;
            if_packet_info.cid = 0; //not implemented
            if_packet_info.has_tsi = false;
            if_packet_info.has_tsf = true;
            if_packet_info.tsf = boost::uint64_t(BE_MACRO(packet_buff[3])) << 32;
            if_packet_info.tsf |= BE_MACRO(packet_buff[4]);
            if_packet_info.has_tlr = true;
            if_packet_info.tlr = BE_MACRO(packet_buff[packet_words32-1]);
            //another failure case
            if (packet_words32 < 6)
                throw std::runtime_error("bad vrt header or invalid packet length");
            if_packet_info.num_header_words32 = 5;
            if_packet_info.num_payload_words32 = packet_words32 - 6;
        break;
    case 27:
            if_packet_info.has_sid = true;
            if_packet_info.sid = BE_MACRO(packet_buff[1]);
            if_packet_info.has_cid = true;
            if_packet_info.cid = 0; //not implemented
            if_packet_info.has_tsi = false;
            if_packet_info.has_tsf = true;
            if_packet_info.tsf = boost::uint64_t(BE_MACRO(packet_buff[4])) << 32;
            if_packet_info.tsf |= BE_MACRO(packet_buff[5]);
            if_packet_info.has_tlr = true;
            if_packet_info.tlr = BE_MACRO(packet_buff[packet_words32-1]);
            //another failure case
            if (packet_words32 < 7)
                throw std::runtime_error("bad vrt header or invalid packet length");
            if_packet_info.num_header_words32 = 6;
            if_packet_info.num_payload_words32 = packet_words32 - 7;
        break;
    case 28:
            if_packet_info.has_sid = false;
            if_packet_info.has_cid = false;
            if_packet_info.has_tsi = true;
            if_packet_info.tsi = BE_MACRO(packet_buff[1]);
            if_packet_info.has_tsf = true;
            if_packet_info.tsf = boost::uint64_t(BE_MACRO(packet_buff[2])) << 32;
            if_packet_info.tsf |= BE_MACRO(packet_buff[3]);
            if_packet_info.has_tlr = true;
            if_packet_info.tlr = BE_MACRO(packet_buff[packet_words32-1]);
            //another failure case
            if (packet_words32 < 5)
                throw std::runtime_error("bad vrt header or invalid packet length");
            if_packet_info.num_header_words32 = 4;
            if_packet_info.num_payload_words32 = packet_words32 - 5;
        break;
    case 29:
            if_packet_info.has_sid = true;
            if_packet_info.sid = BE_MACRO(packet_buff[1]);
            if_packet_info.has_cid = false;
            if_packet_info.has_tsi = true;
            if_packet_info.tsi = BE_MACRO(packet_buff[2]);
            if_packet_info.has_tsf = true;
            if_packet_info.tsf = boost::uint64_t(BE_MACRO(packet_buff[3])) << 32;
            if_packet_info.tsf |= BE_MACRO(packet_buff[4]);
            if_packet_info.has_tlr = true;
            if_packet_info.tlr = BE_MACRO(packet_buff[packet_words32-1]);
            //another failure case
            if (packet_words32 < 6)
                throw std::runtime_error("bad vrt header or invalid packet length");
            if_packet_info.num_header_words32 = 5;
            if_packet_info.num_payload_words32 = packet_words32 - 6;
        break;
    case 30:
            if_packet_info.has_sid = false;
            if_packet_info.has_cid = true;
            if_packet_info.cid = 0; //not implemented
            if_packet_info.has_tsi = true;
            if_packet_info.tsi = BE_MACRO(packet_buff[3]);
            if_packet_info.has_tsf = true;
            if_packet_info.tsf = boost::uint64_t(BE_MACRO(packet_buff[4])) << 32;
            if_packet_info.tsf |= BE_MACRO(packet_buff[5]);
            if_packet_info.has_tlr = true;
            if_packet_info.tlr = BE_MACRO(packet_buff[packet_words32-1]);
            //another failure case
            if (packet_words32 < 7)
                throw std::runtime_error("bad vrt header or invalid packet length");
            if_packet_info.num_header_words32 = 6;
            if_packet_info.num_payload_words32 = packet_words32 - 7;
        break;
    case 31:
            if_packet_info.has_sid = true;
            if_packet_info.sid = BE_MACRO(packet_buff[1]);
            if_packet_info.has_cid = true;
            if_packet_info.cid = 0; //not implemented
            if_packet_info.has_tsi = true;
            if_packet_info.tsi = BE_MACRO(packet_buff[4]);
            if_packet_info.has_tsf = true;
            if_packet_info.tsf = boost::uint64_t(BE_MACRO(packet_buff[5])) << 32;
            if_packet_info.tsf |= BE_MACRO(packet_buff[6]);
            if_packet_info.has_tlr = true;
            if_packet_info.tlr = BE_MACRO(packet_buff[packet_words32-1]);
            //another failure case
            if (packet_words32 < 8)
                throw std::runtime_error("bad vrt header or invalid packet length");
            if_packet_info.num_header_words32 = 7;
            if_packet_info.num_payload_words32 = packet_words32 - 8;
        break;
    }
}



void vrt::if_hdr_pack_le(
    boost::uint32_t *packet_buff,
    if_packet_info_t &if_packet_info
){
    boost::uint32_t vrt_hdr_flags = 0;

    pred_type pred = 0;
    if (if_packet_info.has_sid) pred |= 0x1;
    if (if_packet_info.has_cid) pred |= 0x2;
    if (if_packet_info.has_tsi) pred |= 0x4;
    if (if_packet_info.has_tsf) pred |= 0x8;
    if (if_packet_info.has_tlr) pred |= 0x10;

    switch(pred){
    case 0:
            if_packet_info.num_header_words32 = 1;
            if_packet_info.num_packet_words32 = 1 + if_packet_info.num_payload_words32;
            vrt_hdr_flags = 0x0;
        break;
    case 1:
            packet_buff[1] = LE_MACRO(if_packet_info.sid);
            if_packet_info.num_header_words32 = 2;
            if_packet_info.num_packet_words32 = 2 + if_packet_info.num_payload_words32;
            vrt_hdr_flags = 0x10000000;
        break;
    case 2:
            packet_buff[1] = 0; //not implemented
            packet_buff[2] = 0; //not implemented
            if_packet_info.num_header_words32 = 3;
            if_packet_info.num_packet_words32 = 3 + if_packet_info.num_payload_words32;
            vrt_hdr_flags = 0x8000000;
        break;
    case 3:
            packet_buff[1] = LE_MACRO(if_packet_info.sid);
            packet_buff[2] = 0; //not implemented
            packet_buff[3] = 0; //not implemented
            if_packet_info.num_header_words32 = 4;
            if_packet_info.num_packet_words32 = 4 + if_packet_info.num_payload_words32;
            vrt_hdr_flags = 0x18000000;
        break;
    case 4:
            packet_buff[1] = LE_MACRO(if_packet_info.tsi);
            if_packet_info.num_header_words32 = 2;
            if_packet_info.num_packet_words32 = 2 + if_packet_info.num_payload_words32;
            vrt_hdr_flags = 0xc00000;
        break;
    case 5:
            packet_buff[1] = LE_MACRO(if_packet_info.sid);
            packet_buff[2] = LE_MACRO(if_packet_info.tsi);
            if_packet_info.num_header_words32 = 3;
            if_packet_info.num_packet_words32 = 3 + if_packet_info.num_payload_words32;
            vrt_hdr_flags = 0x10c00000;
        break;
    case 6:
            packet_buff[1] = 0; //not implemented
            packet_buff[2] = 0; //not implemented
            packet_buff[3] = LE_MACRO(if_packet_info.tsi);
            if_packet_info.num_header_words32 = 4;
            if_packet_info.num_packet_words32 = 4 + if_packet_info.num_payload_words32;
            vrt_hdr_flags = 0x8c00000;
        break;
    case 7:
            packet_buff[1] = LE_MACRO(if_packet_info.sid);
            packet_buff[2] = 0; //not implemented
            packet_buff[3] = 0; //not implemented
            packet_buff[4] = LE_MACRO(if_packet_info.tsi);
            if_packet_info.num_header_words32 = 5;
            if_packet_info.num_packet_words32 = 5 + if_packet_info.num_payload_words32;
            vrt_hdr_flags = 0x18c00000;
        break;
    case 8:
            packet_buff[1] = LE_MACRO(boost::uint32_t(if_packet_info.tsf >> 32));
            packet_buff[2] = LE_MACRO(boost::uint32_t(if_packet_info.tsf >> 0));
            if_packet_info.num_header_words32 = 3;
            if_packet_info.num_packet_words32 = 3 + if_packet_info.num_payload_words32;
            vrt_hdr_flags = 0x100000;
        break;
    case 9:
            packet_buff[1] = LE_MACRO(if_packet_info.sid);
            packet_buff[2] = LE_MACRO(boost::uint32_t(if_packet_info.tsf >> 32));
            packet_buff[3] = LE_MACRO(boost::uint32_t(if_packet_info.tsf >> 0));
            if_packet_info.num_header_words32 = 4;
            if_packet_info.num_packet_words32 = 4 + if_packet_info.num_payload_words32;
            vrt_hdr_flags = 0x10100000;
        break;
    case 10:
            packet_buff[1] = 0; //not implemented
            packet_buff[2] = 0; //not implemented
            packet_buff[3] = LE_MACRO(boost::uint32_t(if_packet_info.tsf >> 32));
            packet_buff[4] = LE_MACRO(boost::uint32_t(if_packet_info.tsf >> 0));
            if_packet_info.num_header_words32 = 5;
            if_packet_info.num_packet_words32 = 5 + if_packet_info.num_payload_words32;
            vrt_hdr_flags = 0x8100000;
        break;
    case 11:
            packet_buff[1] = LE_MACRO(if_packet_info.sid);
            packet_buff[2] = 0; //not implemented
            packet_buff[3] = 0; //not implemented
            packet_buff[4] = LE_MACRO(boost::uint32_t(if_packet_info.tsf >> 32));
            packet_buff[5] = LE_MACRO(boost::uint32_t(if_packet_info.tsf >> 0));
            if_packet_info.num_header_words32 = 6;
            if_packet_info.num_packet_words32 = 6 + if_packet_info.num_payload_words32;
            vrt_hdr_flags = 0x18100000;
        break;
    case 12:
            packet_buff[1] = LE_MACRO(if_packet_info.tsi);
            packet_buff[2] = LE_MACRO(boost::uint32_t(if_packet_info.tsf >> 32));
            packet_buff[3] = LE_MACRO(boost::uint32_t(if_packet_info.tsf >> 0));
            if_packet_info.num_header_words32 = 4;
            if_packet_info.num_packet_words32 = 4 + if_packet_info.num_payload_words32;
            vrt_hdr_flags = 0xd00000;
        break;
    case 13:
            packet_buff[1] = LE_MACRO(if_packet_info.sid);
            packet_buff[2] = LE_MACRO(if_packet_info.tsi);
            packet_buff[3] = LE_MACRO(boost::uint32_t(if_packet_info.tsf >> 32));
            packet_buff[4] = LE_MACRO(boost::uint32_t(if_packet_info.tsf >> 0));
            if_packet_info.num_header_words32 = 5;
            if_packet_info.num_packet_words32 = 5 + if_packet_info.num_payload_words32;
            vrt_hdr_flags = 0x10d00000;
        break;
    case 14:
            packet_buff[1] = 0; //not implemented
            packet_buff[2] = 0; //not implemented
            packet_buff[3] = LE_MACRO(if_packet_info.tsi);
            packet_buff[4] = LE_MACRO(boost::uint32_t(if_packet_info.tsf >> 32));
            packet_buff[5] = LE_MACRO(boost::uint32_t(if_packet_info.tsf >> 0));
            if_packet_info.num_header_words32 = 6;
            if_packet_info.num_packet_words32 = 6 + if_packet_info.num_payload_words32;
            vrt_hdr_flags = 0x8d00000;
        break;
    case 15:
            packet_buff[1] = LE_MACRO(if_packet_info.sid);
            packet_buff[2] = 0; //not implemented
            packet_buff[3] = 0; //not implemented
            packet_buff[4] = LE_MACRO(if_packet_info.tsi);
            packet_buff[5] = LE_MACRO(boost::uint32_t(if_packet_info.tsf >> 32));
            packet_buff[6] = LE_MACRO(boost::uint32_t(if_packet_info.tsf >> 0));
            if_packet_info.num_header_words32 = 7;
            if_packet_info.num_packet_words32 = 7 + if_packet_info.num_payload_words32;
            vrt_hdr_flags = 0x18d00000;
        break;
    case 16:
            //packet_buff[1+if_packet_info.num_payload_words32] = LE_MACRO(if_packet_info.tlr);
            if_packet_info.num_header_words32 = 1;
            if_packet_info.num_packet_words32 = 2 + if_packet_info.num_payload_words32;
            vrt_hdr_flags = 0x4000000;
        break;
    case 17:
            packet_buff[1] = LE_MACRO(if_packet_info.sid);
            //packet_buff[2+if_packet_info.num_payload_words32] = LE_MACRO(if_packet_info.tlr);
            if_packet_info.num_header_words32 = 2;
            if_packet_info.num_packet_words32 = 3 + if_packet_info.num_payload_words32;
            vrt_hdr_flags = 0x14000000;
        break;
    case 18:
            packet_buff[1] = 0; //not implemented
            packet_buff[2] = 0; //not implemented
            //packet_buff[3+if_packet_info.num_payload_words32] = LE_MACRO(if_packet_info.tlr);
            if_packet_info.num_header_words32 = 3;
            if_packet_info.num_packet_words32 = 4 + if_packet_info.num_payload_words32;
            vrt_hdr_flags = 0xc000000;
        break;
    case 19:
            packet_buff[1] = LE_MACRO(if_packet_info.sid);
            packet_buff[2] = 0; //not implemented
            packet_buff[3] = 0; //not implemented
            //packet_buff[4+if_packet_info.num_payload_words32] = LE_MACRO(if_packet_info.tlr);
            if_packet_info.num_header_words32 = 4;
            if_packet_info.num_packet_words32 = 5 + if_packet_info.num_payload_words32;
            vrt_hdr_flags = 0x1c000000;
        break;
    case 20:
            packet_buff[1] = LE_MACRO(if_packet_info.tsi);
            //packet_buff[2+if_packet_info.num_payload_words32] = LE_MACRO(if_packet_info.tlr);
            if_packet_info.num_header_words32 = 2;
            if_packet_info.num_packet_words32 = 3 + if_packet_info.num_payload_words32;
            vrt_hdr_flags = 0x4c00000;
        break;
    case 21:
            packet_buff[1] = LE_MACRO(if_packet_info.sid);
            packet_buff[2] = LE_MACRO(if_packet_info.tsi);
            //packet_buff[3+if_packet_info.num_payload_words32] = LE_MACRO(if_packet_info.tlr);
            if_packet_info.num_header_words32 = 3;
            if_packet_info.num_packet_words32 = 4 + if_packet_info.num_payload_words32;
            vrt_hdr_flags = 0x14c00000;
        break;
    case 22:
            packet_buff[1] = 0; //not implemented
            packet_buff[2] = 0; //not implemented
            packet_buff[3] = LE_MACRO(if_packet_info.tsi);
            //packet_buff[4+if_packet_info.num_payload_words32] = LE_MACRO(if_packet_info.tlr);
            if_packet_info.num_header_words32 = 4;
            if_packet_info.num_packet_words32 = 5 + if_packet_info.num_payload_words32;
            vrt_hdr_flags = 0xcc00000;
        break;
    case 23:
            packet_buff[1] = LE_MACRO(if_packet_info.sid);
            packet_buff[2] = 0; //not implemented
            packet_buff[3] = 0; //not implemented
            packet_buff[4] = LE_MACRO(if_packet_info.tsi);
            //packet_buff[5+if_packet_info.num_payload_words32] = LE_MACRO(if_packet_info.tlr);
            if_packet_info.num_header_words32 = 5;
            if_packet_info.num_packet_words32 = 6 + if_packet_info.num_payload_words32;
            vrt_hdr_flags = 0x1cc00000;
        break;
    case 24:
            packet_buff[1] = LE_MACRO(boost::uint32_t(if_packet_info.tsf >> 32));
            packet_buff[2] = LE_MACRO(boost::uint32_t(if_packet_info.tsf >> 0));
            //packet_buff[3+if_packet_info.num_payload_words32] = LE_MACRO(if_packet_info.tlr);
            if_packet_info.num_header_words32 = 3;
            if_packet_info.num_packet_words32 = 4 + if_packet_info.num_payload_words32;
            vrt_hdr_flags = 0x4100000;
        break;
    case 25:
            packet_buff[1] = LE_MACRO(if_packet_info.sid);
            packet_buff[2] = LE_MACRO(boost::uint32_t(if_packet_info.tsf >> 32));
            packet_buff[3] = LE_MACRO(boost::uint32_t(if_packet_info.tsf >> 0));
            //packet_buff[4+if_packet_info.num_payload_words32] = LE_MACRO(if_packet_info.tlr);
            if_packet_info.num_header_words32 = 4;
            if_packet_info.num_packet_words32 = 5 + if_packet_info.num_payload_words32;
            vrt_hdr_flags = 0x14100000;
        break;
    case 26:
            packet_buff[1] = 0; //not implemented
            packet_buff[2] = 0; //not implemented
            packet_buff[3] = LE_MACRO(boost::uint32_t(if_packet_info.tsf >> 32));
            packet_buff[4] = LE_MACRO(boost::uint32_t(if_packet_info.tsf >> 0));
            //packet_buff[5+if_packet_info.num_payload_words32] = LE_MACRO(if_packet_info.tlr);
            if_packet_info.num_header_words32 = 5;
            if_packet_info.num_packet_words32 = 6 + if_packet_info.num_payload_words32;
            vrt_hdr_flags = 0xc100000;
        break;
    case 27:
            packet_buff[1] = LE_MACRO(if_packet_info.sid);
            packet_buff[2] = 0; //not implemented
            packet_buff[3] = 0; //not implemented
            packet_buff[4] = LE_MACRO(boost::uint32_t(if_packet_info.tsf >> 32));
            packet_buff[5] = LE_MACRO(boost::uint32_t(if_packet_info.tsf >> 0));
            //packet_buff[6+if_packet_info.num_payload_words32] = LE_MACRO(if_packet_info.tlr);
            if_packet_info.num_header_words32 = 6;
            if_packet_info.num_packet_words32 = 7 + if_packet_info.num_payload_words32;
            vrt_hdr_flags = 0x1c100000;
        break;
    case 28:
            packet_buff[1] = LE_MACRO(if_packet_info.tsi);
            packet_buff[2] = LE_MACRO(boost::uint32_t(if_packet_info.tsf >> 32));
            packet_buff[3] = LE_MACRO(boost::uint32_t(if_packet_info.tsf >> 0));
            //packet_buff[4+if_packet_info.num_payload_words32] = LE_MACRO(if_packet_info.tlr);
            if_packet_info.num_header_words32 = 4;
            if_packet_info.num_packet_words32 = 5 + if_packet_info.num_payload_words32;
            vrt_hdr_flags = 0x4d00000;
        break;
    case 29:
            packet_buff[1] = LE_MACRO(if_packet_info.sid);
            packet_buff[2] = LE_MACRO(if_packet_info.tsi);
            packet_buff[3] = LE_MACRO(boost::uint32_t(if_packet_info.tsf >> 32));
            packet_buff[4] = LE_MACRO(boost::uint32_t(if_packet_info.tsf >> 0));
            //packet_buff[5+if_packet_info.num_payload_words32] = LE_MACRO(if_packet_info.tlr);
            if_packet_info.num_header_words32 = 5;
            if_packet_info.num_packet_words32 = 6 + if_packet_info.num_payload_words32;
            vrt_hdr_flags = 0x14d00000;
        break;
    case 30:
            packet_buff[1] = 0; //not implemented
            packet_buff[2] = 0; //not implemented
            packet_buff[3] = LE_MACRO(if_packet_info.tsi);
            packet_buff[4] = LE_MACRO(boost::uint32_t(if_packet_info.tsf >> 32));
            packet_buff[5] = LE_MACRO(boost::uint32_t(if_packet_info.tsf >> 0));
            //packet_buff[6+if_packet_info.num_payload_words32] = LE_MACRO(if_packet_info.tlr);
            if_packet_info.num_header_words32 = 6;
            if_packet_info.num_packet_words32 = 7 + if_packet_info.num_payload_words32;
            vrt_hdr_flags = 0xcd00000;
        break;
    case 31:
            packet_buff[1] = LE_MACRO(if_packet_info.sid);
            packet_buff[2] = 0; //not implemented
            packet_buff[3] = 0; //not implemented
            packet_buff[4] = LE_MACRO(if_packet_info.tsi);
            packet_buff[5] = LE_MACRO(boost::uint32_t(if_packet_info.tsf >> 32));
            packet_buff[6] = LE_MACRO(boost::uint32_t(if_packet_info.tsf >> 0));
            //packet_buff[7+if_packet_info.num_payload_words32] = LE_MACRO(if_packet_info.tlr);
            if_packet_info.num_header_words32 = 7;
            if_packet_info.num_packet_words32 = 8 + if_packet_info.num_payload_words32;
            vrt_hdr_flags = 0x1cd00000;
        break;
    }

    //set the burst flags
    if (if_packet_info.sob) vrt_hdr_flags |= 0x2000000;
    if (if_packet_info.eob) vrt_hdr_flags |= 0x1000000;

    //fill in complete header word
    packet_buff[0] = LE_MACRO(boost::uint32_t(0
        | vrt_hdr_flags
        | ((if_packet_info.packet_count & 0xf) << 16)
        | (if_packet_info.num_packet_words32 & 0xffff)
    ));
}

void vrt::if_hdr_unpack_le(
    const boost::uint32_t *packet_buff,
    if_packet_info_t &if_packet_info
){
    //extract vrt header
    boost::uint32_t vrt_hdr_word = LE_MACRO(packet_buff[0]);
    /*
    size_t packet_words32 = vrt_hdr_word & 0xffff;

    //failure case
    if (if_packet_info.num_packet_words32 < packet_words32)
        throw std::runtime_error("bad vrt header or packet fragment");
    */
    //Fix for short packets sent from the fpga:
    //  Use the num_packet_words32 passed in as input,
    //  and do not use the header bits which could be wrong.
    size_t packet_words32 = if_packet_info.num_packet_words32;

    //extract fields from the header
    if_packet_info.packet_type = if_packet_info_t::packet_type_t(vrt_hdr_word >> 29);
    if_packet_info.packet_count = (vrt_hdr_word >> 16) & 0xf;
    //if_packet_info.sob = bool(vrt_hdr_word & 0x2000000); //not implemented
    //if_packet_info.eob = bool(vrt_hdr_word & 0x1000000); //not implemented

    const pred_type pred = pred_unpack_table[pred_table_index(vrt_hdr_word)];

    switch(pred){
    case 0:
            if_packet_info.has_sid = false;
            if_packet_info.has_cid = false;
            if_packet_info.has_tsi = false;
            if_packet_info.has_tsf = false;
            if_packet_info.has_tlr = false;
            //another failure case
            if (packet_words32 < 1)
                throw std::runtime_error("bad vrt header or invalid packet length");
            if_packet_info.num_header_words32 = 1;
            if_packet_info.num_payload_words32 = packet_words32 - 1;
        break;
    case 1:
            if_packet_info.has_sid = true;
            if_packet_info.sid = LE_MACRO(packet_buff[1]);
            if_packet_info.has_cid = false;
            if_packet_info.has_tsi = false;
            if_packet_info.has_tsf = false;
            if_packet_info.has_tlr = false;
            //another failure case
            if (packet_words32 < 2)
                throw std::runtime_error("bad vrt header or invalid packet length");
            if_packet_info.num_header_words32 = 2;
            if_packet_info.num_payload_words32 = packet_words32 - 2;
        break;
    case 2:
            if_packet_info.has_sid = false;
            if_packet_info.has_cid = true;
            if_packet_info.cid = 0; //not implemented
            if_packet_info.has_tsi = false;
            if_packet_info.has_tsf = false;
            if_packet_info.has_tlr = false;
            //another failure case
            if (packet_words32 < 3)
                throw std::runtime_error("bad vrt header or invalid packet length");
            if_packet_info.num_header_words32 = 3;
            if_packet_info.num_payload_words32 = packet_words32 - 3;
        break;
    case 3:
            if_packet_info.has_sid = true;
            if_packet_info.sid = LE_MACRO(packet_buff[1]);
            if_packet_info.has_cid = true;
            if_packet_info.cid = 0; //not implemented
            if_packet_info.has_tsi = false;
            if_packet_info.has_tsf = false;
            if_packet_info.has_tlr = false;
            //another failure case
            if (packet_words32 < 4)
                throw std::runtime_error("bad vrt header or invalid packet length");
            if_packet_info.num_header_words32 = 4;
            if_packet_info.num_payload_words32 = packet_words32 - 4;
        break;
    case 4:
            if_packet_info.has_sid = false;
            if_packet_info.has_cid = false;
            if_packet_info.has_tsi = true;
            if_packet_info.tsi = LE_MACRO(packet_buff[1]);
            if_packet_info.has_tsf = false;
            if_packet_info.has_tlr = false;
            //another failure case
            if (packet_words32 < 2)
                throw std::runtime_error("bad vrt header or invalid packet length");
            if_packet_info.num_header_words32 = 2;
            if_packet_info.num_payload_words32 = packet_words32 - 2;
        break;
    case 5:
            if_packet_info.has_sid = true;
            if_packet_info.sid = LE_MACRO(packet_buff[1]);
            if_packet_info.has_cid = false;
            if_packet_info.has_tsi = true;
            if_packet_info.tsi = LE_MACRO(packet_buff[2]);
            if_packet_info.has_tsf = false;
            if_packet_info.has_tlr = false;
            //another failure case
            if (packet_words32 < 3)
                throw std::runtime_error("bad vrt header or invalid packet length");
            if_packet_info.num_header_words32 = 3;
            if_packet_info.num_payload_words32 = packet_words32 - 3;
        break;
    case 6:
            if_packet_info.has_sid = false;
            if_packet_info.has_cid = true;
            if_packet_info.cid = 0; //not implemented
            if_packet_info.has_tsi = true;
            if_packet_info.tsi = LE_MACRO(packet_buff[3]);
            if_packet_info.has_tsf = false;
            if_packet_info.has_tlr = false;
            //another failure case
            if (packet_words32 < 4)
                throw std::runtime_error("bad vrt header or invalid packet length");
            if_packet_info.num_header_words32 = 4;
            if_packet_info.num_payload_words32 = packet_words32 - 4;
        break;
    case 7:
            if_packet_info.has_sid = true;
            if_packet_info.sid = LE_MACRO(packet_buff[1]);
            if_packet_info.has_cid = true;
            if_packet_info.cid = 0; //not implemented
            if_packet_info.has_tsi = true;
            if_packet_info.tsi = LE_MACRO(packet_buff[4]);
            if_packet_info.has_tsf = false;
            if_packet_info.has_tlr = false;
            //another failure case
            if (packet_words32 < 5)
                throw std::runtime_error("bad vrt header or invalid packet length");
            if_packet_info.num_header_words32 = 5;
            if_packet_info.num_payload_words32 = packet_words32 - 5;
        break;
    case 8:
            if_packet_info.has_sid = false;
            if_packet_info.has_cid = false;
            if_packet_info.has_tsi = false;
            if_packet_info.has_tsf = true;
            if_packet_info.tsf = boost::uint64_t(LE_MACRO(packet_buff[1])) << 32;
            if_packet_info.tsf |= LE_MACRO(packet_buff[2]);
            if_packet_info.has_tlr = false;
            //another failure case
            if (packet_words32 < 3)
                throw std::runtime_error("bad vrt header or invalid packet length");
            if_packet_info.num_header_words32 = 3;
            if_packet_info.num_payload_words32 = packet_words32 - 3;
        break;
    case 9:
            if_packet_info.has_sid = true;
            if_packet_info.sid = LE_MACRO(packet_buff[1]);
            if_packet_info.has_cid = false;
            if_packet_info.has_tsi = false;
            if_packet_info.has_tsf = true;
            if_packet_info.tsf = boost::uint64_t(LE_MACRO(packet_buff[2])) << 32;
            if_packet_info.tsf |= LE_MACRO(packet_buff[3]);
            if_packet_info.has_tlr = false;
            //another failure case
            if (packet_words32 < 4)
                throw std::runtime_error("bad vrt header or invalid packet length");
            if_packet_info.num_header_words32 = 4;
            if_packet_info.num_payload_words32 = packet_words32 - 4;
        break;
    case 10:
            if_packet_info.has_sid = false;
            if_packet_info.has_cid = true;
            if_packet_info.cid = 0; //not implemented
            if_packet_info.has_tsi = false;
            if_packet_info.has_tsf = true;
            if_packet_info.tsf = boost::uint64_t(LE_MACRO(packet_buff[3])) << 32;
            if_packet_info.tsf |= LE_MACRO(packet_buff[4]);
            if_packet_info.has_tlr = false;
            //another failure case
            if (packet_words32 < 5)
                throw std::runtime_error("bad vrt header or invalid packet length");
            if_packet_info.num_header_words32 = 5;
            if_packet_info.num_payload_words32 = packet_words32 - 5;
        break;
    case 11:
            if_packet_info.has_sid = true;
            if_packet_info.sid = LE_MACRO(packet_buff[1]);
            if_packet_info.has_cid = true;
            if_packet_info.cid = 0; //not implemented
            if_packet_info.has_tsi = false;
            if_packet_info.has_tsf = true;
            if_packet_info.tsf = boost::uint64_t(LE_MACRO(packet_buff[4])) << 32;
            if_packet_info.tsf |= LE_MACRO(packet_buff[5]);
            if_packet_info.has_tlr = false;
            //another failure case
            if (packet_words32 < 6)
                throw std::runtime_error("bad vrt header or invalid packet length");
            if_packet_info.num_header_words32 = 6;
            if_packet_info.num_payload_words32 = packet_words32 - 6;
        break;
    case 12:
            if_packet_info.has_sid = false;
            if_packet_info.has_cid = false;
            if_packet_info.has_tsi = true;
            if_packet_info.tsi = LE_MACRO(packet_buff[1]);
            if_packet_info.has_tsf = true;
            if_packet_info.tsf = boost::uint64_t(LE_MACRO(packet_buff[2])) << 32;
            if_packet_info.tsf |= LE_MACRO(packet_buff[3]);
            if_packet_info.has_tlr = false;
            //another failure case
            if (packet_words32 < 4)
                throw std::runtime_error("bad vrt header or invalid packet length");
            if_packet_info.num_header_words32 = 4;
            if_packet_info.num_payload_words32 = packet_words32 - 4;
        break;
    case 13:
            if_packet_info.has_sid = true;
            if_packet_info.sid = LE_MACRO(packet_buff[1]);
            if_packet_info.has_cid = false;
            if_packet_info.has_tsi = true;
            if_packet_info.tsi = LE_MACRO(packet_buff[2]);
            if_packet_info.has_tsf = true;
            if_packet_info.tsf = boost::uint64_t(LE_MACRO(packet_buff[3])) << 32;
            if_packet_info.tsf |= LE_MACRO(packet_buff[4]);
            if_packet_info.has_tlr = false;
            //another failure case
            if (packet_words32 < 5)
                throw std::runtime_error("bad vrt header or invalid packet length");
            if_packet_info.num_header_words32 = 5;
            if_packet_info.num_payload_words32 = packet_words32 - 5;
        break;
    case 14:
            if_packet_info.has_sid = false;
            if_packet_info.has_cid = true;
            if_packet_info.cid = 0; //not implemented
            if_packet_info.has_tsi = true;
            if_packet_info.tsi = LE_MACRO(packet_buff[3]);
            if_packet_info.has_tsf = true;
            if_packet_info.tsf = boost::uint64_t(LE_MACRO(packet_buff[4])) << 32;
            if_packet_info.tsf |= LE_MACRO(packet_buff[5]);
            if_packet_info.has_tlr = false;
            //another failure case
            if (packet_words32 < 6)
                throw std::runtime_error("bad vrt header or invalid packet length");
            if_packet_info.num_header_words32 = 6;
            if_packet_info.num_payload_words32 = packet_words32 - 6;
        break;
    case 15:
            if_packet_info.has_sid = true;
            if_packet_info.sid = LE_MACRO(packet_buff[1]);
            if_packet_info.has_cid = true;
            if_packet_info.cid = 0; //not implemented
            if_packet_info.has_tsi = true;
            if_packet_info.tsi = LE_MACRO(packet_buff[4]);
            if_packet_info.has_tsf = true;
            if_packet_info.tsf = boost::uint64_t(LE_MACRO(packet_buff[5])) << 32;
            if_packet_info.tsf |= LE_MACRO(packet_buff[6]);
            if_packet_info.has_tlr = false;
            //another failure case
            if (packet_words32 < 7)
                throw std::runtime_error("bad vrt header or invalid packet length");
            if_packet_info.num_header_words32 = 7;
            if_packet_info.num_payload_words32 = packet_words32 - 7;
        break;
    case 16:
            if_packet_info.has_sid = false;
            if_packet_info.has_cid = false;
            if_packet_info.has_tsi = false;
            if_packet_info.has_tsf = false;
            if_packet_info.has_tlr = true;
            if_packet_info.tlr = LE_MACRO(packet_buff[packet_words32-1]);
            //another failure case
            if (packet_words32 < 2)
                throw std::runtime_error("bad vrt header or invalid packet length");
            if_packet_info.num_header_words32 = 1;
            if_packet_info.num_payload_words32 = packet_words32 - 2;
        break;
    case 17:
            if_packet_info.has_sid = true;
            if_packet_info.sid = LE_MACRO(packet_buff[1]);
            if_packet_info.has_cid = false;
            if_packet_info.has_tsi = false;
            if_packet_info.has_tsf = false;
            if_packet_info.has_tlr = true;
            if_packet_info.tlr = LE_MACRO(packet_buff[packet_words32-1]);
            //another failure case
            if (packet_words32 < 3)
                throw std::runtime_error("bad vrt header or invalid packet length");
            if_packet_info.num_header_words32 = 2;
            if_packet_info.num_payload_words32 = packet_words32 - 3;
        break;
    case 18:
            if_packet_info.has_sid = false;
            if_packet_info.has_cid = true;
            if_packet_info.cid = 0; //not implemented
            if_packet_info.has_tsi = false;
            if_packet_info.has_tsf = false;
            if_packet_info.has_tlr = true;
            if_packet_info.tlr = LE_MACRO(packet_buff[packet_words32-1]);
            //another failure case
            if (packet_words32 < 4)
                throw std::runtime_error("bad vrt header or invalid packet length");
            if_packet_info.num_header_words32 = 3;
            if_packet_info.num_payload_words32 = packet_words32 - 4;
        break;
    case 19:
            if_packet_info.has_sid = true;
            if_packet_info.sid = LE_MACRO(packet_buff[1]);
            if_packet_info.has_cid = true;
            if_packet_info.cid = 0; //not implemented
            if_packet_info.has_tsi = false;
            if_packet_info.has_tsf = false;
            if_packet_info.has_tlr = true;
            if_packet_info.tlr = LE_MACRO(packet_buff[packet_words32-1]);
            //another failure case
            if (packet_words32 < 5)
                throw std::runtime_error("bad vrt header or invalid packet length");
            if_packet_info.num_header_words32 = 4;
            if_packet_info.num_payload_words32 = packet_words32 - 5;
        break;
    case 20:
            if_packet_info.has_sid = false;
            if_packet_info.has_cid = false;
            if_packet_info.has_tsi = true;
            if_packet_info.tsi = LE_MACRO(packet_buff[1]);
            if_packet_info.has_tsf = false;
            if_packet_info.has_tlr = true;
            if_packet_info.tlr = LE_MACRO(packet_buff[packet_words32-1]);
            //another failure case
            if (packet_words32 < 3)
                throw std::runtime_error("bad vrt header or invalid packet length");
            if_packet_info.num_header_words32 = 2;
            if_packet_info.num_payload_words32 = packet_words32 - 3;
        break;
    case 21:
            if_packet_info.has_sid = true;
            if_packet_info.sid = LE_MACRO(packet_buff[1]);
            if_packet_info.has_cid = false;
            if_packet_info.has_tsi = true;
            if_packet_info.tsi = LE_MACRO(packet_buff[2]);
            if_packet_info.has_tsf = false;
            if_packet_info.has_tlr = true;
            if_packet_info.tlr = LE_MACRO(packet_buff[packet_words32-1]);
            //another failure case
            if (packet_words32 < 4)
                throw std::runtime_error("bad vrt header or invalid packet length");
            if_packet_info.num_header_words32 = 3;
            if_packet_info.num_payload_words32 = packet_words32 - 4;
        break;
    case 22:
            if_packet_info.has_sid = false;
            if_packet_info.has_cid = true;
            if_packet_info.cid = 0; //not implemented
            if_packet_info.has_tsi = true;
            if_packet_info.tsi = LE_MACRO(packet_buff[3]);
            if_packet_info.has_tsf = false;
            if_packet_info.has_tlr = true;
            if_packet_info.tlr = LE_MACRO(packet_buff[packet_words32-1]);
            //another failure case
            if (packet_words32 < 5)
                throw std::runtime_error("bad vrt header or invalid packet length");
            if_packet_info.num_header_words32 = 4;
            if_packet_info.num_payload_words32 = packet_words32 - 5;
        break;
    case 23:
            if_packet_info.has_sid = true;
            if_packet_info.sid = LE_MACRO(packet_buff[1]);
            if_packet_info.has_cid = true;
            if_packet_info.cid = 0; //not implemented
            if_packet_info.has_tsi = true;
            if_packet_info.tsi = LE_MACRO(packet_buff[4]);
            if_packet_info.has_tsf = false;
            if_packet_info.has_tlr = true;
            if_packet_info.tlr = LE_MACRO(packet_buff[packet_words32-1]);
            //another failure case
            if (packet_words32 < 6)
                throw std::runtime_error("bad vrt header or invalid packet length");
            if_packet_info.num_header_words32 = 5;
            if_packet_info.num_payload_words32 = packet_words32 - 6;
        break;
    case 24:
            if_packet_info.has_sid = false;
            if_packet_info.has_cid = false;
            if_packet_info.has_tsi = false;
            if_packet_info.has_tsf = true;
            if_packet_info.tsf = boost::uint64_t(LE_MACRO(packet_buff[1])) << 32;
            if_packet_info.tsf |= LE_MACRO(packet_buff[2]);
            if_packet_info.has_tlr = true;
            if_packet_info.tlr = LE_MACRO(packet_buff[packet_words32-1]);
            //another failure case
            if (packet_words32 < 4)
                throw std::runtime_error("bad vrt header or invalid packet length");
            if_packet_info.num_header_words32 = 3;
            if_packet_info.num_payload_words32 = packet_words32 - 4;
        break;
    case 25:
            if_packet_info.has_sid = true;
            if_packet_info.sid = LE_MACRO(packet_buff[1]);
            if_packet_info.has_cid = false;
            if_packet_info.has_tsi = false;
            if_packet_info.has_tsf = true;
            if_packet_info.tsf = boost::uint64_t(LE_MACRO(packet_buff[2])) << 32;
            if_packet_info.tsf |= LE_MACRO(packet_buff[3]);
            if_packet_info.has_tlr = true;
            if_packet_info.tlr = LE_MACRO(packet_buff[packet_words32-1]);
            //another failure case
            if (packet_words32 < 5)
                throw std::runtime_error("bad vrt header or invalid packet length");
            if_packet_info.num_header_words32 = 4;
            if_packet_info.num_payload_words32 = packet_words32 - 5;
        break;
    case 26:
            if_packet_info.has_sid = false;
            if_packet_info.has_cid = true;
            if_packet_info.cid = 0; //not implemented
            if_packet_info.has_tsi = false;
            if_packet_info.has_tsf = true;
            if_packet_info.tsf = boost::uint64_t(LE_MACRO(packet_buff[3])) << 32;
            if_packet_info.tsf |= LE_MACRO(packet_buff[4]);
            if_packet_info.has_tlr = true;
            if_packet_info.tlr = LE_MACRO(packet_buff[packet_words32-1]);
            //another failure case
            if (packet_words32 < 6)
                throw std::runtime_error("bad vrt header or invalid packet length");
            if_packet_info.num_header_words32 = 5;
            if_packet_info.num_payload_words32 = packet_words32 - 6;
        break;
    case 27:
            if_packet_info.has_sid = true;
            if_packet_info.sid = LE_MACRO(packet_buff[1]);
            if_packet_info.has_cid = true;
            if_packet_info.cid = 0; //not implemented
            if_packet_info.has_tsi = false;
            if_packet_info.has_tsf = true;
            if_packet_info.tsf = boost::uint64_t(LE_MACRO(packet_buff[4])) << 32;
            if_packet_info.tsf |= LE_MACRO(packet_buff[5]);
            if_packet_info.has_tlr = true;
            if_packet_info.tlr = LE_MACRO(packet_buff[packet_words32-1]);
            //another failure case
            if (packet_words32 < 7)
                throw std::runtime_error("bad vrt header or invalid packet length");
            if_packet_info.num_header_words32 = 6;
            if_packet_info.num_payload_words32 = packet_words32 - 7;
        break;
    case 28:
            if_packet_info.has_sid = false;
            if_packet_info.has_cid = false;
            if_packet_info.has_tsi = true;
            if_packet_info.tsi = LE_MACRO(packet_buff[1]);
            if_packet_info.has_tsf = true;
            if_packet_info.tsf = boost::uint64_t(LE_MACRO(packet_buff[2])) << 32;
            if_packet_info.tsf |= LE_MACRO(packet_buff[3]);
            if_packet_info.has_tlr = true;
            if_packet_info.tlr = LE_MACRO(packet_buff[packet_words32-1]);
            //another failure case
            if (packet_words32 < 5)
                throw std::runtime_error("bad vrt header or invalid packet length");
            if_packet_info.num_header_words32 = 4;
            if_packet_info.num_payload_words32 = packet_words32 - 5;
        break;
    case 29:
            if_packet_info.has_sid = true;
            if_packet_info.sid = LE_MACRO(packet_buff[1]);
            if_packet_info.has_cid = false;
            if_packet_info.has_tsi = true;
            if_packet_info.tsi = LE_MACRO(packet_buff[2]);
            if_packet_info.has_tsf = true;
            if_packet_info.tsf = boost::uint64_t(LE_MACRO(packet_buff[3])) << 32;
            if_packet_info.tsf |= LE_MACRO(packet_buff[4]);
            if_packet_info.has_tlr = true;
            if_packet_info.tlr = LE_MACRO(packet_buff[packet_words32-1]);
            //another failure case
            if (packet_words32 < 6)
                throw std::runtime_error("bad vrt header or invalid packet length");
            if_packet_info.num_header_words32 = 5;
            if_packet_info.num_payload_words32 = packet_words32 - 6;
        break;
    case 30:
            if_packet_info.has_sid = false;
            if_packet_info.has_cid = true;
            if_packet_info.cid = 0; //not implemented
            if_packet_info.has_tsi = true;
            if_packet_info.tsi = LE_MACRO(packet_buff[3]);
            if_packet_info.has_tsf = true;
            if_packet_info.tsf = boost::uint64_t(LE_MACRO(packet_buff[4])) << 32;
            if_packet_info.tsf |= LE_MACRO(packet_buff[5]);
            if_packet_info.has_tlr = true;
            if_packet_info.tlr = LE_MACRO(packet_buff[packet_words32-1]);
            //another failure case
            if (packet_words32 < 7)
                throw std::runtime_error("bad vrt header or invalid packet length");
            if_packet_info.num_header_words32 = 6;
            if_packet_info.num_payload_words32 = packet_words32 - 7;
        break;
    case 31:
            if_packet_info.has_sid = true;
            if_packet_info.sid = LE_MACRO(packet_buff[1]);
            if_packet_info.has_cid = true;
            if_packet_info.cid = 0; //not implemented
            if_packet_info.has_tsi = true;
            if_packet_info.tsi = LE_MACRO(packet_buff[4]);
            if_packet_info.has_tsf = true;
            if_packet_info.tsf = boost::uint64_t(LE_MACRO(packet_buff[5])) << 32;
            if_packet_info.tsf |= LE_MACRO(packet_buff[6]);
            if_packet_info.has_tlr = true;
            if_packet_info.tlr = LE_MACRO(packet_buff[packet_words32-1]);
            //another failure case
            if (packet_words32 < 8)
                throw std::runtime_error("bad vrt header or invalid packet length");
            if_packet_info.num_header_words32 = 7;
            if_packet_info.num_payload_words32 = packet_words32 - 8;
        break;
    }
}


